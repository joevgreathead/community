"""
Applet: Outage Detector
Summary: Checks for web page outages
Description: Loads a page of your choice to see if it loads ok or is down.
Author: joevgreathead
"""

load("cache.star", "cache")
load("render.star", "render")
load("schema.star", "schema")
load("http.star", "http")
load("html.star", "html")
load("encoding/json.star", "json")
load("encoding/base64.star", "base64")
load("time.star", "time")
load("math.star", "math")
load("humanize.star", "humanize")

# BEGIN ICONS
CROSS_MARK_MOZILLA = base64.decode("iVBORw0KGgoAAAANSUhEUgAAAHgAAAB4CAMAAAAOusbgAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAB3RJTUUH4QYQDQs7lLJjBAAAAURQTFRFAAAA/zQz/0I8/0NC/0ND/0NF/0Q//0RA/0RB/0RC/0RD/0RE/0U7/0U8/0U+/0VA/0VB/0VC/0VD/0Y8/0Y9/0Y+/0Y//0ZA/0ZB/0c5/0c8/0c9/0c+/0c//0dA/0dB/0dC/0gy/0g8/0g9/0g+/0hB/0k8/0k+/0oj/0o7/0s8/006/01B/8Cx/0U+/0Y9/0Y+/0c8/0c+/0dA/0g9/0g+/0c9/0c+/0c+/0c+/0c+/0c9/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c//0c+/0c//0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+/0c+////ADhidwAAAGp0Uk5TAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEBAQEBBwcICQwNDRgZICEkJSoqKyssMDFAQUJERY+QkZKTm5ygocHCw8TFxsfIy8zNztfY7/Dx8o9CE5cAAAABYktHRGtSZaWYAAAECElEQVRo3u2baXvSQBDHo1btKVQgVDO0HnjU+26LSMGWHrZApRQNCEpNW7rf/wPI8Vghm012d4bHN8zrsD8y/8wM7P5jGOMYxzhGF7FX6Uwm9R4o1oq+TGUy6bcSaz2FtcJh/cSpHeyvotGwsndQc07qh8U1uOV/6aKVq56zXrSPshDGYK/AeuWsv9b5txwkfbMMO012EfY2RPW5ccjb/9b6uQumL/cXG4gmgmxCvjG4VsuH7OYy1tiGWT3uhIvrR+a5vXuO6HDDHFdMvuHB1c123IPbI4f4a5c8ub1sK5cVeHK97/ke5JqMCchzatwpAbeTv8/w0P0lV6tMEKo6h4RcxqpcV4Jim/mQo/p1NBTtogsMd8tMHJ1sWyRcxsqPh8mQrjMSMvhzWe3j8EKQcVgAOYrVtxdOBpTAkmQziMucTy5wymaBZAvPZd9TLvCDUsAnus+2hdO3G6XLrvEIe6eM4bIdl+Ce7nF1vFJhOLJEnhmrrAD3sawtQ46o98mBsLO8XMnEVgNBDstwG3mIeUkkQRZ1z7gUV/B4LsCW7oel9BW3/JuS5Dktff2G3FXJbEcU+2TwzzctnZF51taZhGsY06rZRus7kO0fCjcQwtQRQmeiPP9tQtI6k3INY0ZW50kqfVWzTaevWlXlNyjz3I95GfLxMWqQisarBFmrsZPoTKqvks6k+ipNSaI60piSmnNwdDo3UVtG+jrjuJJTklRfpSlJVEd4nbF5VpiSI+BKTklSffWyTaGvTlVR5VlhShLnWU1nnTkYpPNm8Nhnv/N0+l78X9j4L2Cp/wsjSHVIkkv9cJnSXNpyUuFSNpApJS5dtkOKXKpsm8pcGrIOl0LnSS0uXue4JhebbVObiyNPILiYH/RhFFdf5ziSq5ttE83Vq6opAq7OlJTqk8ct8q0IU26/fZN680V230x/Zx2hb7dYpvX2t1H69m8EdY6BOl8gJCvui4apdFbeF52h0Vnj/Igk21r7zwt48oTe/vO8pM6zqDno1X6ROiPOB1E6o84XEOeSScn7jWDOJT2OcR9hD66ldLaznMuI4qheglz5wHkE9s+w5oQFHXNC7NkBvuEmZOwY10dhQJGoKjs1EstNMJmz3BCZjAKnJGcyorJVJQLItfTwQsnndEYyX/LXS26vT6GNzrNEVbULoGQWVDJI+mWbNwsuE9ojZywRuZmDZffV9wkNoQmBb6i1ay3xVy8SWmC9p2RrF257a0Nn+vWakh2uJXoq6GzO/LmkmMuTMRso7u7px+2RyazsHZ0HBk9zx78HDZj3z47Wceb9awPm/WqAed8w7sBqoVx3HLv0heR1hZLtOLVycQ2eBF8ee9F9QeMdyaaz9br7gsYbkpc9xjGOcQjiD18w+K1+C2/HAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDE3LTA2LTE2VDE1OjExOjUzKzAyOjAwKyby0gAAACV0RVh0ZGF0ZTptb2RpZnkAMjAxNy0wNi0xNlQxNToxMTo1MyswMjowMFp7Sm4AAAAZdEVYdFNvZnR3YXJlAHd3dy5pbmtzY2FwZS5vcmeb7jwaAAAAAElFTkSuQmCC")
CROSS_MARK_APPLE = base64.decode("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")
CROSS_MARK_WINDOWS = base64.decode("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")

CHECK_MARK_APPLE = base64.decode("")
CHECK_MARK_MOZILLA = base64.decode("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")
CHECK_MARK_WINDOWS = base64.decode("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")
# END ICONS

# BEGIN CONFIG VALUES
DEFAULT_SITE_URL = "tidbyt.com"
DEFAULT_SITE_LABEL = ""
APPLE = "apple"
MOZILLA = "mozilla"
WINDOWS = "windows"
# END CONFIG VALUES

CHECK = "check"
CROSS = "cross"
ICON_SIZE = 12
LIST_LENGTH = 12
KEY_RESULTS = "results"
KEY_STATUS = "status"
KEY_LAST_SEEN = "lastSeen"
CACHE_KEY_PREFIX = "results-set"

def main(config):
    site_url = config.str("site_url") or DEFAULT_SITE_URL
    site_label = config.str("site_label") or DEFAULT_SITE_LABEL
    icon_style = config.str("icon_style") or MOZILLA
    if icon_style == None or icon_style == "":
        icon_style = MOZILLA

    url_to_call = initialize_url(site_url)
    if url_to_call == None:
        return display_error("Invalid URL configured")

    json_data = get_json_data(url_to_call)

    now = time.now()
    block = get_time_block(now)

    results = prepare_list(block, json_data)
    status = next_status(results, url_to_call)
    if status == None:
        status = current_status(json_data)

    last_seen_to_use = get_last_seen(
        status,
        current_status(json_data),
        now,
        current_last_seen(json_data),
    )
    cache_data(results, status, last_seen_to_use, url_to_call)

    time_since = since_last_seen(now, last_seen_to_use)

    return render.Root(
        child = render.Column(
            children = [
                render.Row(
                    children = [
                        plot(results_to_plot_data(results)),
                        status_block(
                            status,
                            icon_style,
                            format_time_since(time_since),
                        ),
                    ],
                ),
                render.Row(children = [
                    content(url_to_call, site_label),
                ]),
            ],
        ),
    )

def display_error(msg):
    return render.Root(
        child = render.WrappedText(content = msg),
    )

def cache_key(url):
    return CACHE_KEY_PREFIX + "-" + url

def get_json_data(url):
    CACHE_KEY = cache_key(url)
    uptime_json = cache.get(CACHE_KEY)
    if uptime_json == None:
        uptime_json = default_state()
    return json.decode(uptime_json)

def default_state():
    return "{" + "\"{}\":[], \"{}\": null, \"{}\": null".format(
        KEY_RESULTS,
        KEY_STATUS,
        KEY_LAST_SEEN,
    ) + "}"

def get_last_seen(new_status, old_status, new_last_seen, old_last_seen):
    if new_status != old_status or old_last_seen == None:
        return new_last_seen.format("2006-01-02T15:04:05Z07:00")
    else:
        return old_last_seen

def format_time_since(diff):
    minutes = math.floor(diff.minutes)

    if minutes >= 60:
        return "1hr"
    else:
        return "{}m".format(minutes)

def since_last_seen(now, last_seen):
    if last_seen == None:
        return time.minute
    difference = now - time.parse_time(last_seen)

    return difference

def next_status(results, url_to_call):
    success = None
    if can_be_requested(results):
        success = get_status(url_to_call)
        if success == True:
            add_success(results)
        else:
            add_failure(results)

    return success

def current_status(data):
    return data[KEY_STATUS]

def current_last_seen(data):
    return data[KEY_LAST_SEEN]

def current_results(data):
    return data[KEY_RESULTS]

def cache_data(updated_results, new_status, last_seen, url):
    cache_data = {}
    cache_data[KEY_RESULTS] = updated_results
    cache_data[KEY_STATUS] = new_status
    cache_data[KEY_LAST_SEEN] = last_seen

    cache.set(cache_key(url), json.encode(cache_data), ttl_seconds = 3600)

def results_to_plot_data(results):
    new_list = []
    index = 0
    for item in results:
        new_list.append((index, 5 - failure_count(item)))
        index += 1

    return new_list

def can_be_requested(results):
    return total_requests(get_last_item(results)) < 5

def noop_item():
    return {"block": "", "total": 5, "success": 0, "failure": 5}

def new_block_item(block_time):
    return {"block": block_time, "total": 0, "success": 0, "failure": 0}

def add_failure(results):
    item = get_last_item(results)
    item["failure"] = item["failure"] + 1
    increment_total(item)

def add_success(results):
    item = get_last_item(results)
    item["success"] = item["success"] + 1
    increment_total(item)

def increment_total(item):
    item["total"] = item["total"] + 1

def total_requests(item):
    return item["total"]

def failure_count(item):
    return item["failure"]

def success_count(item):
    return item["success"]

def last_status(item):
    return item["last"]

def block_for(item):
    return item["block"]

def prepare_list(block, json_data, target_length = LIST_LENGTH):
    existing_list = current_results(json_data)
    last_item = get_last_item(existing_list)

    new_list = []
    new_list.extend(existing_list)

    if last_item == None:
        for i in range(0, target_length - 1):
            new_list.append(noop_item())
        new_list.append(new_block_item(block))
    elif block_for(last_item) != block:
        new_list.append(new_block_item(block))

    if len(new_list) > target_length:
        for x in range(1, len(new_list) - target_length + 1):
            new_list.remove(new_list[0])

    return new_list

def get_last_item(a_list):
    list_length = len(a_list)

    if list_length > 0:
        last_item = a_list[list_length - 1]
    else:
        last_item = None

    return last_item

def get_time_block(some_time):
    minute = int(humanize.time_format("m", some_time))
    offset = math.mod(minute, 5)
    block_of_five = minute - offset

    block_time = time.time(
        year = some_time.year,
        month = some_time.month,
        day = some_time.day,
        hour = some_time.hour,
        minute = int(block_of_five),
        second = 0,
    )

    return str(block_time)

def get_status(site_url):
    response = http.get(site_url)

    return response.status_code == 200

def initialize_url(site_url):
    url = site_url
    url = url.replace("https://", "", 1)
    url = url.replace("http://", "", 1)
    url = url.replace("://", "", 1)
    url = url.replace("localhost", "", 1)
    url = url.replace("127.0.0.1", "", 1)
    url = url.replace("::1", "", 1)

    if len(url.split(".")) <= 1:
        return None

    return "https://" + url

def plot(data):
    return render.Plot(
        width = 44,
        height = 24,
        data = data,
        x_lim = (0, LIST_LENGTH),
        y_lim = (0, 5),
        fill = True,
        color = "#2ecc71",
        fill_color = "#2ecc71",
    )

def status_block(status, style, since_last):
    col_width = 20
    return render.Box(
        width = col_width,
        height = 24,
        child = render.Column(
            children = [
                render.Box(height = 2),
                render.Box(
                    width = col_width,
                    height = ICON_SIZE,
                    child = current_icon(status, style),
                ),
                render.Box(
                    width = col_width,
                    height = 8,
                    child = render.Text(content = since_last),
                ),
            ],
        ),
    )

def current_icon(status, style):
    if status:
        icon_src = icons(style).get(CHECK)
    else:
        icon_src = icons(style).get(CROSS)
    return render.Image(
        src = icon_src,
        width = ICON_SIZE,
        height = ICON_SIZE,
    )

def icons(source):
    icon_map = {
        APPLE: {
            CHECK: CHECK_MARK_APPLE,
            CROSS: CROSS_MARK_APPLE,
        },
        MOZILLA: {
            CHECK: CHECK_MARK_MOZILLA,
            CROSS: CROSS_MARK_MOZILLA,
        },
        WINDOWS: {
            CHECK: CHECK_MARK_WINDOWS,
            CROSS: CROSS_MARK_WINDOWS,
        },
    }
    return icon_map.get(source)

def content(value, override_value, width = 64):
    display_value = override_value or value.replace("https://", "", 1)
    return render.Marquee(
        align = "center",
        height = 8,
        width = width,
        offset_start = width,
        offset_end = width,
        scroll_direction = "horizontal",
        child = render.Text(
            content = display_value,
        ),
    )

def get_schema():
    options = [
        schema.Option(
            display = "Apple",
            value = APPLE,
        ),
        schema.Option(
            display = "Mozilla",
            value = MOZILLA,
        ),
        schema.Option(
            display = "Windows",
            value = WINDOWS,
        ),
    ]

    return schema.Schema(
        version = "1",
        fields = [
            schema.Text(
                id = "site_url",
                name = "Site to Track",
                desc = "The site URL which will be queried and tracked. You can leave off the https:// part.",
                icon = "link",
                default = DEFAULT_SITE_URL,
            ),
            schema.Text(
                id = "site_label",
                name = "Custom Label",
                desc = "A custom label to display instead of the site URL. Labels too big to fit will scroll.",
                icon = "tag",
                default = DEFAULT_SITE_LABEL,
            ),
            schema.Dropdown(
                id = "icon_style",
                name = "Emoji Style",
                desc = "The emoji style for status icons.",
                icon = "messageSmile",
                default = MOZILLA,
                options = options,
            ),
        ],
    )
